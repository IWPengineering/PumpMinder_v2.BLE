/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2095.0) */

#ifndef BLE_DISPLAY_SERVICE_H__
#define BLE_DISPLAY_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Display Service event type. */
typedef enum
{ 
	BLE_DISPLAY_SERVICE_RECORD_NUMBER_EVT_NOTIFICATION_ENABLED,  /**< Record Number value notification enabled event. */
	BLE_DISPLAY_SERVICE_RECORD_NUMBER_EVT_NOTIFICATION_DISABLED, /**< Record Number value notification disabled event. */
	BLE_DISPLAY_SERVICE_RECORD_NUMBER_EVT_WRITE, /**< Record Number write event. */
	BLE_DISPLAY_SERVICE_RECORD_EVT_NOTIFICATION_ENABLED,  /**< Record value notification enabled event. */
	BLE_DISPLAY_SERVICE_RECORD_EVT_NOTIFICATION_DISABLED, /**< Record value notification disabled event. */
	BLE_DISPLAY_SERVICE_RECORD_EVT_CCCD_WRITE, /**< Record CCCD write event. */
} ble_display_service_evt_type_t;

// Forward declaration of the ble_display_service_t type.
typedef struct ble_display_service_s ble_display_service_t;








/**@brief Record Number structure. */
typedef struct
{
	uint8_t record_number;
} ble_display_service_record_number_t;
/**@brief Record structure. */
typedef struct
{
	uint8_t record_number;
	uint32_t seconds_running;
	uint32_t timestamp;
} ble_display_service_record_t;

/**@brief Display Service Service event. */
typedef struct
{
	ble_display_service_evt_type_t evt_type;    /**< Type of event. */
	union {
		uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
		ble_display_service_record_number_t record_number; /**< Holds decoded data in Write event handler. */
	} params;
} ble_display_service_evt_t;

/**@brief Display Service Service event handler type. */
typedef void(*ble_display_service_evt_handler_t)(ble_display_service_t * p_display_service, ble_display_service_evt_t * p_evt);

/**@brief Display Service Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
	ble_display_service_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Display Service Service. */
	ble_display_service_record_number_t ble_display_service_record_number_initial_value; /**< If not NULL, initial value of the Record Number characteristic. */ 
	ble_display_service_record_t ble_display_service_record_initial_value; /**< If not NULL, initial value of the Record characteristic. */ 
} ble_display_service_init_t;

/**@brief Display Service Service structure. This contains various status information for the service.*/
struct ble_display_service_s
{
	ble_display_service_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Display Service Service. */
	uint16_t service_handle; /**< Handle of Display Service Service (as provided by the BLE stack). */
	ble_gatts_char_handles_t record_number_handles; /**< Handles related to the Record Number characteristic. */
	ble_gatts_char_handles_t record_handles; /**< Handles related to the Record characteristic. */
	uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Display Service.
 *
 * @param[out]  p_display_service       Display Service Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_display_service_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_display_service_init(ble_display_service_t * p_display_service, const ble_display_service_init_t * p_display_service_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_display_service_on_ble_evt(ble_display_service_t * p_display_service, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Record.
 *
 * @details Sets a new value of the Record characteristic. The new value will be sent
 *          to the client the next time the client reads the Record characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_display_service                 Display Service Service structure.
 * @param[in]   p_record  New Record.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_display_service_record_set(ble_display_service_t * p_display_service, ble_display_service_record_t * p_record);

/**@brief Function for sending the Record.
 *
 * @details The application calls this function after having performed a record.
 *          The record data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_display_service                    Display Service Service structure.
 * @param[in]   p_record               New record.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_display_service_record_send(ble_display_service_t * p_display_service, ble_display_service_record_t * p_record);

#endif //_BLE_DISPLAY_SERVICE_H__
